version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: telemetry
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - iotnet

  datamanager:
    build: ./datamanager-py
    env_file:
      - datamanager-py/.env
    environment:
      POSTGRES_HOST: postgres        # pregazi localhost iz .env kad je u dockeru
    # ports nisu obavezni za inter-container, ali ih ostavljamo da možeš test sa hosta
    ports:
      - "50051:50051"                # tvoja app sluša na 50051
    depends_on:
      - postgres
    networks:
      - iotnet
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.create_connection(('localhost',50051),2); s.close()"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  gateway:
    build:
      context: .
      dockerfile: ./gateway-dotnet/Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8080"
      ASPNETCORE_ENVIRONMENT: "Development"
      Grpc__TelemetryServiceUrl: "http://datamanager:50051"
    ports:
      - "5000:8080"
    depends_on:
      - datamanager
    networks:
      - iotnet
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  sensorgen:
    build: ./sensor-generator
    depends_on:
      - gateway
    networks:
      - iotnet
    volumes:
      - ./data:/data   # Mount data folder containing CSV files
    environment:
      - PYTHONUNBUFFERED=1  # For real-time logging
    command: ["python", "send_stream.py", "--path", "/data/f1_telemetry_wide.csv", "--base-url", "http://gateway:8080", "--rate", "50", "--burst", "10"]

networks:
  iotnet:
    driver: bridge

volumes:
  pgdata:
