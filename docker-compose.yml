version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: telemetry
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - iotnet

  datamanager:
    build: ./datamanager-py
    environment:
      # PostgreSQL Configuration
      POSTGRES_HOST: postgres
      POSTGRES_DB: telemetry
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432
      
      # MQTT Configuration  
      MQTT_HOST: mqtt
      MQTT_PORT: 1883
      MQTT_TOPIC_RAW: telemetry/raw
      MQTT_QOS: 1
      MQTT_CLIENT_ID: datamanager-pub
      
      # gRPC Server Configuration
      GRPC_HOST: 0.0.0.0
      GRPC_PORT: 50051
      
      # Development settings
      DEBUG: true
    ports:
      - "50051:50051"
    depends_on:
      - postgres
      - mqtt
    networks:
      - iotnet
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.create_connection(('localhost',50051),2); s.close()"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  gateway:
    build:
      context: .
      dockerfile: ./gateway-dotnet/Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8080"
      ASPNETCORE_ENVIRONMENT: "Development"
      Grpc__TelemetryServiceUrl: "http://datamanager:50051"
    ports:
      - "5000:8080"
    depends_on:
      - datamanager
    networks:
      - iotnet
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  mqtt:
    image: eclipse-mosquitto:2
    container_name: iot-mqtt
    restart: unless-stopped
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    ports:
      - "1883:1883"   # MQTT TCP
      - "9001:9001"   # MQTT over WebSockets
    networks:
      - iotnet
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_sub -h localhost -p 1883 -t '$SYS/broker/version' -C 1 -W 2 > /dev/null"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  eventmanager:
    build: ./eventmanager-py
    depends_on:
      - mqtt
    environment:
      MQTT_HOST: mqtt
      MQTT_PORT: 1883
      MQTT_TOPIC_RAW: telemetry/raw
      MQTT_TOPIC_EVENTS: telemetry/events
      MQTT_QOS: 1
      RULE_SPEED_MAX: 325
      RULE_RPM_MAX: 12000
      RULE_BRAKE_ALERT_SPEED: 280
    networks:
      - iotnet
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import paho.mqtt.client as m;c=m.Client();c.connect('mqtt',1883,10);print('ok')\""]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

  mqttweb:
    build: ./mqtt-webclient
    depends_on:
      - mqtt
    ports:
      - "8081:80"
    networks:
      - iotnet

  sensorgen:
    build: ./sensor-generator
    depends_on:
      - gateway
    networks:
      - iotnet
    volumes:
      - ./data:/data   # Mount data folder containing CSV files
    environment:
      - PYTHONUNBUFFERED=1  # For real-time logging
    command: ["python", "send_stream.py", "--path", "/data/f1_telemetry_wide.csv", "--base-url", "http://gateway:8080", "--rate", "50", "--burst", "10"]

networks:
  iotnet:
    driver: bridge

volumes:
  pgdata:
